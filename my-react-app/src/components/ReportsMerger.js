import React, { useState, useEffect } from 'react';

const ReportsMerger = ({ user }) => {
  const [assignments, setAssignments] = useState({});
  const [auditReports, setAuditReports] = useState({});
  const [selectedAuditType, setSelectedAuditType] = useState('manufacturing');
  const [mergedReport, setMergedReport] = useState(null);
  const [showMergedReport, setShowMergedReport] = useState(false);

  useEffect(() => {
    // Load assignments
    const savedAssignments = localStorage.getItem('auditAssignments');
    if (savedAssignments) {
      setAssignments(JSON.parse(savedAssignments));
    }

    // Load audit reports
    const savedReports = localStorage.getItem('auditReports');
    if (savedReports) {
      setAuditReports(JSON.parse(savedReports));
    }
  }, []);

  const getCompletedAssignments = () => {
    return Object.values(assignments).filter(assignment => 
      assignment.auditType === selectedAuditType && assignment.status === 'completed'
    );
  };

  const generateMergedReport = () => {
    const completedAssignments = getCompletedAssignments();
    
    if (completedAssignments.length === 0) {
      alert('‡§ï‡•ã‡§à completed assignments ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä merge ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è!');
      return;
    }

    const merged = {
      auditType: selectedAuditType,
      generatedDate: new Date().toISOString().split('T')[0],
      generatedBy: user.name,
      totalAuditors: completedAssignments.length,
      totalSections: completedAssignments.reduce((sum, a) => sum + a.sections.length, 0),
      auditorReports: completedAssignments,
      overallScore: calculateOverallScore(completedAssignments),
      recommendations: generateRecommendations(completedAssignments),
      criticalIssues: extractCriticalIssues(completedAssignments)
    };

    setMergedReport(merged);
    setShowMergedReport(true);

    // Save merged report
    const savedMergedReports = JSON.parse(localStorage.getItem('mergedReports') || '[]');
    savedMergedReports.push(merged);
    localStorage.setItem('mergedReports', JSON.stringify(savedMergedReports));
  };

  const calculateOverallScore = (assignments) => {
    // This would calculate based on actual audit data
    // For now, returning a sample calculation
    const scores = assignments.map(a => Math.floor(Math.random() * 20) + 80); // Sample scores 80-100
    const avgScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    return Math.round(avgScore);
  };

  const generateRecommendations = (assignments) => {
    return [
      'Quality control processes need enhancement in production line',
      'Safety protocols require more frequent training sessions',
      'Documentation systems should be digitized for better tracking',
      'Equipment calibration schedules need optimization',
      'HR policies need clearer communication to all staff'
    ];
  };

  const extractCriticalIssues = (assignments) => {
    return [
      {
        issue: 'Non-compliance in safety protocols',
        auditor: 'Nishant',
        section: 'Safety & Compliance',
        severity: 'High',
        recommendation: 'Immediate training required'
      },
      {
        issue: 'Missing calibration records',
        auditor: 'Saumya',
        section: 'Calibration & Testing',
        severity: 'Medium',
        recommendation: 'Update documentation system'
      }
    ];
  };

  const exportToWhatsApp = () => {
    if (!mergedReport) return;

    const message = `üè≠ *GAUTAM SOLAR - FINAL AUDIT REPORT*
üìÖ Date: ${mergedReport.generatedDate}
üë§ Generated By: ${mergedReport.generatedBy}

üìä *AUDIT SUMMARY*
Audit Type: ${mergedReport.auditType.toUpperCase()}
Total Auditors: ${mergedReport.totalAuditors}
Total Sections: ${mergedReport.totalSections}
Overall Score: ${mergedReport.overallScore}%

üë• *AUDITOR PERFORMANCE*
${mergedReport.auditorReports.map(a => 
`‚Ä¢ ${a.auditorName}: ${a.sections.length} sections completed`
).join('\n')}

‚ö†Ô∏è *CRITICAL ISSUES*
${mergedReport.criticalIssues.map(issue => 
`‚Ä¢ ${issue.issue} (${issue.severity})`
).join('\n')}

üí° *KEY RECOMMENDATIONS*
${mergedReport.recommendations.slice(0, 3).map(rec => 
`‚Ä¢ ${rec}`
).join('\n')}

Generated by Gautam Solar Internal Audit System`;

    const encodedMessage = encodeURIComponent(message);
    const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;
    window.open(whatsappUrl, '_blank');
  };

  if (user.role !== 'superadmin') {
    return (
      <div className="access-denied">
        <h2>üö´ Access Denied</h2>
        <p>‡§ï‡•á‡§µ‡§≤ Super Admin reports merge ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§</p>
      </div>
    );
  }

  return (
    <div className="reports-merger">
      <div className="merger-header">
        <h2>üìä Final Reports Merger</h2>
        <p>Head Internal Auditor - Consolidated Report Generation</p>
      </div>

      {/* Audit Type Selection */}
      <div className="audit-type-selector">
        <h3>Select Audit Type for Merging</h3>
        <div className="type-buttons">
          <button 
            className={`type-btn ${selectedAuditType === 'manufacturing' ? 'active' : ''}`}
            onClick={() => setSelectedAuditType('manufacturing')}
          >
            Manufacturing Audit
          </button>
          <button 
            className={`type-btn ${selectedAuditType === 'recordKeeping' ? 'active' : ''}`}
            onClick={() => setSelectedAuditType('recordKeeping')}
          >
            Record Keeping Audit
          </button>
          <button 
            className={`type-btn ${selectedAuditType === 'excel' ? 'active' : ''}`}
            onClick={() => setSelectedAuditType('excel')}
          >
            Excel Based Audit
          </button>
        </div>
      </div>

      {/* Completed Assignments Overview */}
      <div className="completed-assignments">
        <h3>Completed Assignments Ready for Merge</h3>
        
        <div className="assignments-grid">
          {getCompletedAssignments().length === 0 ? (
            <div className="no-completed">
              <p>‡§ï‡•ã‡§à completed assignments ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä merge ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§</p>
            </div>
          ) : (
            getCompletedAssignments().map((assignment, index) => (
              <div key={index} className="completed-card">
                <div className="auditor-info">
                  <h4>{assignment.auditorName}</h4>
                  <p>Completed: {assignment.completedDate}</p>
                </div>
                <div className="sections-info">
                  <p><strong>Sections:</strong> {assignment.sections.length}</p>
                  <ul className="sections-list">
                    {assignment.sections.map((section, idx) => (
                      <li key={idx}>{section}</li>
                    ))}
                  </ul>
                </div>
                <div className="status-badge completed">
                  ‚úÖ COMPLETED
                </div>
              </div>
            ))
          )}
        </div>

        {getCompletedAssignments().length > 0 && (
          <button className="merge-btn" onClick={generateMergedReport}>
            üîó Generate Final Merged Report
          </button>
        )}
      </div>

      {/* Merged Report Display */}
      {showMergedReport && mergedReport && (
        <div className="merged-report">
          <div className="report-header">
            <h3>üìã Final Consolidated Report</h3>
            <div className="report-actions">
              <button className="whatsapp-btn" onClick={exportToWhatsApp}>
                üì± Share on WhatsApp
              </button>
              <button className="close-btn" onClick={() => setShowMergedReport(false)}>
                ‚ùå Close
              </button>
            </div>
          </div>

          <div className="report-content">
            <div className="report-summary">
              <h4>Audit Summary</h4>
              <div className="summary-stats">
                <div className="stat-item">
                  <strong>Audit Type:</strong> {mergedReport.auditType.toUpperCase()}
                </div>
                <div className="stat-item">
                  <strong>Generated Date:</strong> {mergedReport.generatedDate}
                </div>
                <div className="stat-item">
                  <strong>Total Auditors:</strong> {mergedReport.totalAuditors}
                </div>
                <div className="stat-item">
                  <strong>Total Sections:</strong> {mergedReport.totalSections}
                </div>
                <div className="stat-item overall-score">
                  <strong>Overall Score:</strong> {mergedReport.overallScore}%
                </div>
              </div>
            </div>

            <div className="auditor-performance">
              <h4>Auditor Performance</h4>
              <div className="performance-grid">
                {mergedReport.auditorReports.map((auditor, index) => (
                  <div key={index} className="performance-card">
                    <h5>{auditor.auditorName}</h5>
                    <p>Sections Completed: {auditor.sections.length}</p>
                    <p>Completion Date: {auditor.completedDate}</p>
                    <div className="sections-assigned">
                      {auditor.sections.map((section, idx) => (
                        <span key={idx} className="section-tag">{section}</span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="critical-issues">
              <h4>‚ö†Ô∏è Critical Issues</h4>
              <div className="issues-list">
                {mergedReport.criticalIssues.map((issue, index) => (
                  <div key={index} className={`issue-card ${issue.severity.toLowerCase()}`}>
                    <h5>{issue.issue}</h5>
                    <p><strong>Found by:</strong> {issue.auditor}</p>
                    <p><strong>Section:</strong> {issue.section}</p>
                    <p><strong>Severity:</strong> {issue.severity}</p>
                    <p><strong>Recommendation:</strong> {issue.recommendation}</p>
                  </div>
                ))}
              </div>
            </div>

            <div className="recommendations">
              <h4>üí° Key Recommendations</h4>
              <ul className="recommendations-list">
                {mergedReport.recommendations.map((rec, index) => (
                  <li key={index}>{rec}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Previous Merged Reports */}
      <div className="previous-reports">
        <h3>üìö Previous Merged Reports</h3>
        <div className="reports-history">
          {JSON.parse(localStorage.getItem('mergedReports') || '[]')
            .filter(report => report.auditType === selectedAuditType)
            .map((report, index) => (
              <div key={index} className="history-card">
                <h4>Report #{index + 1}</h4>
                <p>Date: {report.generatedDate}</p>
                <p>Auditors: {report.totalAuditors}</p>
                <p>Score: {report.overallScore}%</p>
                <button 
                  className="view-btn"
                  onClick={() => {
                    setMergedReport(report);
                    setShowMergedReport(true);
                  }}
                >
                  üëÅÔ∏è View Report
                </button>
              </div>
            ))}
        </div>
      </div>
    </div>
  );
};

export default ReportsMerger;